// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Reverse {
  public static partial class ReverseService
  {
    static readonly string __ServiceName = "reverse.ReverseService";

    static readonly grpc::Marshaller<global::Reverse.ReverseRequest> __Marshaller_ReverseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ReverseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Reverse.ReverseReply> __Marshaller_ReverseReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ReverseReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Reverse.ChatMessage> __Marshaller_ChatMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ChatMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Reverse.ChatMessageFromServer> __Marshaller_ChatMessageFromServer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ChatMessageFromServer.Parser.ParseFrom);

    static readonly grpc::Method<global::Reverse.ReverseRequest, global::Reverse.ReverseReply> __Method_ReverseString = new grpc::Method<global::Reverse.ReverseRequest, global::Reverse.ReverseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReverseString",
        __Marshaller_ReverseRequest,
        __Marshaller_ReverseReply);

    static readonly grpc::Method<global::Reverse.ChatMessage, global::Reverse.ChatMessageFromServer> __Method_chat = new grpc::Method<global::Reverse.ChatMessage, global::Reverse.ChatMessageFromServer>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "chat",
        __Marshaller_ChatMessage,
        __Marshaller_ChatMessageFromServer);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Reverse.ChatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReverseService</summary>
    public abstract partial class ReverseServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Reverse.ReverseReply> ReverseString(global::Reverse.ReverseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task chat(grpc::IAsyncStreamReader<global::Reverse.ChatMessage> requestStream, grpc::IServerStreamWriter<global::Reverse.ChatMessageFromServer> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReverseService</summary>
    public partial class ReverseServiceClient : grpc::ClientBase<ReverseServiceClient>
    {
      /// <summary>Creates a new client for ReverseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReverseServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReverseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReverseServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReverseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReverseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Reverse.ReverseReply ReverseString(global::Reverse.ReverseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReverseString(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Reverse.ReverseReply ReverseString(global::Reverse.ReverseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReverseString, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Reverse.ReverseReply> ReverseStringAsync(global::Reverse.ReverseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReverseStringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Reverse.ReverseReply> ReverseStringAsync(global::Reverse.ReverseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReverseString, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Reverse.ChatMessage, global::Reverse.ChatMessageFromServer> chat(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return chat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Reverse.ChatMessage, global::Reverse.ChatMessageFromServer> chat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_chat, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReverseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReverseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReverseServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReverseString, serviceImpl.ReverseString)
          .AddMethod(__Method_chat, serviceImpl.chat).Build();
    }

  }
}
#endregion
